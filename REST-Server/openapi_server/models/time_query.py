# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class TimeQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query_type=None, result_type=None, start_time=None, end_time=None):  # noqa: E501
        """TimeQuery - a model defined in OpenAPI

        :param query_type: The query_type of this TimeQuery.  # noqa: E501
        :type query_type: str
        :param result_type: The result_type of this TimeQuery.  # noqa: E501
        :type result_type: str
        :param start_time: The start_time of this TimeQuery.  # noqa: E501
        :type start_time: str
        :param end_time: The end_time of this TimeQuery.  # noqa: E501
        :type end_time: str
        """
        self.openapi_types = {
            'query_type': str,
            'result_type': str,
            'start_time': str,
            'end_time': str
        }

        self.attribute_map = {
            'query_type': 'query_type',
            'result_type': 'result_type',
            'start_time': 'start_time',
            'end_time': 'end_time'
        }

        self._query_type = query_type
        self._result_type = result_type
        self._start_time = start_time
        self._end_time = end_time

    @classmethod
    def from_dict(cls, dikt) -> 'TimeQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TimeQuery of this TimeQuery.  # noqa: E501
        :rtype: TimeQuery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query_type(self):
        """Gets the query_type of this TimeQuery.

        Is this a geo, time or text query?  # noqa: E501

        :return: The query_type of this TimeQuery.
        :rtype: str
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """Sets the query_type of this TimeQuery.

        Is this a geo, time or text query?  # noqa: E501

        :param query_type: The query_type of this TimeQuery.
        :type query_type: str
        """
        allowed_values = ["geo", "time", "text"]  # noqa: E501
        if query_type not in allowed_values:
            raise ValueError(
                "Invalid value for `query_type` ({0}), must be one of {1}"
                .format(query_type, allowed_values)
            )

        self._query_type = query_type

    @property
    def result_type(self):
        """Gets the result_type of this TimeQuery.

        Should the query return models, datasets, or variables?  # noqa: E501

        :return: The result_type of this TimeQuery.
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this TimeQuery.

        Should the query return models, datasets, or variables?  # noqa: E501

        :param result_type: The result_type of this TimeQuery.
        :type result_type: str
        """
        allowed_values = ["models", "datasets", "variables"]  # noqa: E501
        if result_type not in allowed_values:
            raise ValueError(
                "Invalid value for `result_type` ({0}), must be one of {1}"
                .format(result_type, allowed_values)
            )

        self._result_type = result_type

    @property
    def start_time(self):
        """Gets the start_time of this TimeQuery.

        Minimum time for search query.  # noqa: E501

        :return: The start_time of this TimeQuery.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TimeQuery.

        Minimum time for search query.  # noqa: E501

        :param start_time: The start_time of this TimeQuery.
        :type start_time: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this TimeQuery.

        Maximum time for search query  # noqa: E501

        :return: The end_time of this TimeQuery.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TimeQuery.

        Maximum time for search query  # noqa: E501

        :param end_time: The end_time of this TimeQuery.
        :type end_time: str
        """
        if end_time is None:
            raise ValueError("Invalid value for `end_time`, must not be `None`")  # noqa: E501

        self._end_time = end_time
