# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class IORequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, iotype=None):  # noqa: E501
        """IORequest - a model defined in OpenAPI

        :param name: The name of this IORequest.  # noqa: E501
        :type name: str
        :param iotype: The iotype of this IORequest.  # noqa: E501
        :type iotype: str
        """
        self.openapi_types = {
            'name': str,
            'iotype': str
        }

        self.attribute_map = {
            'name': 'name',
            'iotype': 'iotype'
        }

        self._name = name
        self._iotype = iotype

    @classmethod
    def from_dict(cls, dikt) -> 'IORequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IORequest of this IORequest.  # noqa: E501
        :rtype: IORequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this IORequest.

        A model's name  # noqa: E501

        :return: The name of this IORequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IORequest.

        A model's name  # noqa: E501

        :param name: The name of this IORequest.
        :type name: str
        """

        self._name = name

    @property
    def iotype(self):
        """Gets the iotype of this IORequest.


        :return: The iotype of this IORequest.
        :rtype: str
        """
        return self._iotype

    @iotype.setter
    def iotype(self, iotype):
        """Sets the iotype of this IORequest.


        :param iotype: The iotype of this IORequest.
        :type iotype: str
        """
        allowed_values = ["input", "output"]  # noqa: E501
        if iotype not in allowed_values:
            raise ValueError(
                "Invalid value for `iotype` ({0}), must be one of {1}"
                .format(iotype, allowed_values)
            )

        self._iotype = iotype
