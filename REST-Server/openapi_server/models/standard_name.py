# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class StandardName(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, standard_variable_id=None, standard_variable_name=None, standard_variable_uri=None):  # noqa: E501
        """StandardName - a model defined in OpenAPI

        :param standard_variable_id: The standard_variable_id of this StandardName.  # noqa: E501
        :type standard_variable_id: str
        :param standard_variable_name: The standard_variable_name of this StandardName.  # noqa: E501
        :type standard_variable_name: str
        :param standard_variable_uri: The standard_variable_uri of this StandardName.  # noqa: E501
        :type standard_variable_uri: str
        """
        self.openapi_types = {
            'standard_variable_id': str,
            'standard_variable_name': str,
            'standard_variable_uri': str
        }

        self.attribute_map = {
            'standard_variable_id': 'standard_variable_id',
            'standard_variable_name': 'standard_variable_name',
            'standard_variable_uri': 'standard_variable_uri'
        }

        self._standard_variable_id = standard_variable_id
        self._standard_variable_name = standard_variable_name
        self._standard_variable_uri = standard_variable_uri

    @classmethod
    def from_dict(cls, dikt) -> 'StandardName':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StandardName of this StandardName.  # noqa: E501
        :rtype: StandardName
        """
        return util.deserialize_model(dikt, cls)

    @property
    def standard_variable_id(self):
        """Gets the standard_variable_id of this StandardName.

        The MINT UUID associated with the standard name  # noqa: E501

        :return: The standard_variable_id of this StandardName.
        :rtype: str
        """
        return self._standard_variable_id

    @standard_variable_id.setter
    def standard_variable_id(self, standard_variable_id):
        """Sets the standard_variable_id of this StandardName.

        The MINT UUID associated with the standard name  # noqa: E501

        :param standard_variable_id: The standard_variable_id of this StandardName.
        :type standard_variable_id: str
        """
        if standard_variable_id is None:
            raise ValueError("Invalid value for `standard_variable_id`, must not be `None`")  # noqa: E501

        self._standard_variable_id = standard_variable_id

    @property
    def standard_variable_name(self):
        """Gets the standard_variable_name of this StandardName.

        The natural language name for a standard name  # noqa: E501

        :return: The standard_variable_name of this StandardName.
        :rtype: str
        """
        return self._standard_variable_name

    @standard_variable_name.setter
    def standard_variable_name(self, standard_variable_name):
        """Sets the standard_variable_name of this StandardName.

        The natural language name for a standard name  # noqa: E501

        :param standard_variable_name: The standard_variable_name of this StandardName.
        :type standard_variable_name: str
        """
        if standard_variable_name is None:
            raise ValueError("Invalid value for `standard_variable_name`, must not be `None`")  # noqa: E501

        self._standard_variable_name = standard_variable_name

    @property
    def standard_variable_uri(self):
        """Gets the standard_variable_uri of this StandardName.

        The URI associated with the standard name  # noqa: E501

        :return: The standard_variable_uri of this StandardName.
        :rtype: str
        """
        return self._standard_variable_uri

    @standard_variable_uri.setter
    def standard_variable_uri(self, standard_variable_uri):
        """Sets the standard_variable_uri of this StandardName.

        The URI associated with the standard name  # noqa: E501

        :param standard_variable_uri: The standard_variable_uri of this StandardName.
        :type standard_variable_uri: str
        """
        if standard_variable_uri is None:
            raise ValueError("Invalid value for `standard_variable_uri`, must not be `None`")  # noqa: E501

        self._standard_variable_uri = standard_variable_uri
