# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class GeoQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, query_type=None, result_type=None, xmin=None, xmax=None, ymin=None, ymax=None):  # noqa: E501
        """GeoQuery - a model defined in OpenAPI

        :param query_type: The query_type of this GeoQuery.  # noqa: E501
        :type query_type: str
        :param result_type: The result_type of this GeoQuery.  # noqa: E501
        :type result_type: str
        :param xmin: The xmin of this GeoQuery.  # noqa: E501
        :type xmin: float
        :param xmax: The xmax of this GeoQuery.  # noqa: E501
        :type xmax: float
        :param ymin: The ymin of this GeoQuery.  # noqa: E501
        :type ymin: float
        :param ymax: The ymax of this GeoQuery.  # noqa: E501
        :type ymax: float
        """
        self.openapi_types = {
            'query_type': str,
            'result_type': str,
            'xmin': float,
            'xmax': float,
            'ymin': float,
            'ymax': float
        }

        self.attribute_map = {
            'query_type': 'query_type',
            'result_type': 'result_type',
            'xmin': 'xmin',
            'xmax': 'xmax',
            'ymin': 'ymin',
            'ymax': 'ymax'
        }

        self._query_type = query_type
        self._result_type = result_type
        self._xmin = xmin
        self._xmax = xmax
        self._ymin = ymin
        self._ymax = ymax

    @classmethod
    def from_dict(cls, dikt) -> 'GeoQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GeoQuery of this GeoQuery.  # noqa: E501
        :rtype: GeoQuery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def query_type(self):
        """Gets the query_type of this GeoQuery.

        Is this a geo, time or text query?  # noqa: E501

        :return: The query_type of this GeoQuery.
        :rtype: str
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """Sets the query_type of this GeoQuery.

        Is this a geo, time or text query?  # noqa: E501

        :param query_type: The query_type of this GeoQuery.
        :type query_type: str
        """
        allowed_values = ["geo", "time", "text"]  # noqa: E501
        if query_type not in allowed_values:
            raise ValueError(
                "Invalid value for `query_type` ({0}), must be one of {1}"
                .format(query_type, allowed_values)
            )

        self._query_type = query_type

    @property
    def result_type(self):
        """Gets the result_type of this GeoQuery.

        Should the query return models, datasets, or variables?  # noqa: E501

        :return: The result_type of this GeoQuery.
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this GeoQuery.

        Should the query return models, datasets, or variables?  # noqa: E501

        :param result_type: The result_type of this GeoQuery.
        :type result_type: str
        """
        allowed_values = ["models", "datasets", "variables"]  # noqa: E501
        if result_type not in allowed_values:
            raise ValueError(
                "Invalid value for `result_type` ({0}), must be one of {1}"
                .format(result_type, allowed_values)
            )

        self._result_type = result_type

    @property
    def xmin(self):
        """Gets the xmin of this GeoQuery.

        Minimum longitude  # noqa: E501

        :return: The xmin of this GeoQuery.
        :rtype: float
        """
        return self._xmin

    @xmin.setter
    def xmin(self, xmin):
        """Sets the xmin of this GeoQuery.

        Minimum longitude  # noqa: E501

        :param xmin: The xmin of this GeoQuery.
        :type xmin: float
        """
        if xmin is None:
            raise ValueError("Invalid value for `xmin`, must not be `None`")  # noqa: E501

        self._xmin = xmin

    @property
    def xmax(self):
        """Gets the xmax of this GeoQuery.

        Maximum longitude  # noqa: E501

        :return: The xmax of this GeoQuery.
        :rtype: float
        """
        return self._xmax

    @xmax.setter
    def xmax(self, xmax):
        """Sets the xmax of this GeoQuery.

        Maximum longitude  # noqa: E501

        :param xmax: The xmax of this GeoQuery.
        :type xmax: float
        """
        if xmax is None:
            raise ValueError("Invalid value for `xmax`, must not be `None`")  # noqa: E501

        self._xmax = xmax

    @property
    def ymin(self):
        """Gets the ymin of this GeoQuery.

        Minimum latitude  # noqa: E501

        :return: The ymin of this GeoQuery.
        :rtype: float
        """
        return self._ymin

    @ymin.setter
    def ymin(self, ymin):
        """Sets the ymin of this GeoQuery.

        Minimum latitude  # noqa: E501

        :param ymin: The ymin of this GeoQuery.
        :type ymin: float
        """
        if ymin is None:
            raise ValueError("Invalid value for `ymin`, must not be `None`")  # noqa: E501

        self._ymin = ymin

    @property
    def ymax(self):
        """Gets the ymax of this GeoQuery.

        Maximum latitude  # noqa: E501

        :return: The ymax of this GeoQuery.
        :rtype: float
        """
        return self._ymax

    @ymax.setter
    def ymax(self, ymax):
        """Sets the ymax of this GeoQuery.

        Maximum latitude  # noqa: E501

        :param ymax: The ymax of this GeoQuery.
        :type ymax: float
        """
        if ymax is None:
            raise ValueError("Invalid value for `ymax`, must not be `None`")  # noqa: E501

        self._ymax = ymax
